// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.23.2
// source: dream11/od/service/v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServiceService_DeployService_FullMethodName         = "/dream11.od.service.v1.ServiceService/DeployService"
	ServiceService_ReleaseService_FullMethodName        = "/dream11.od.service.v1.ServiceService/ReleaseService"
	ServiceService_DeployReleasedService_FullMethodName = "/dream11.od.service.v1.ServiceService/DeployReleasedService"
	ServiceService_DeployServiceSet_FullMethodName      = "/dream11.od.service.v1.ServiceService/DeployServiceSet"
	ServiceService_OperateService_FullMethodName        = "/dream11.od.service.v1.ServiceService/OperateService"
	ServiceService_UndeployService_FullMethodName       = "/dream11.od.service.v1.ServiceService/UndeployService"
	ServiceService_ListService_FullMethodName           = "/dream11.od.service.v1.ServiceService/ListService"
	ServiceService_DescribeService_FullMethodName       = "/dream11.od.service.v1.ServiceService/DescribeService"
)

// ServiceServiceClient is the client API for ServiceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceServiceClient interface {
	DeployService(ctx context.Context, in *DeployServiceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DeployServiceResponse], error)
	ReleaseService(ctx context.Context, in *ReleaseServiceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReleaseServiceResponse], error)
	DeployReleasedService(ctx context.Context, in *DeployReleasedServiceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DeployReleasedServiceResponse], error)
	DeployServiceSet(ctx context.Context, in *DeployServiceSetRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DeployServiceSetResponse], error)
	OperateService(ctx context.Context, in *OperateServiceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[OperateServiceResponse], error)
	UndeployService(ctx context.Context, in *UndeployServiceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UndeployServiceResponse], error)
	ListService(ctx context.Context, in *ListServiceRequest, opts ...grpc.CallOption) (*ListServiceResponse, error)
	DescribeService(ctx context.Context, in *DescribeServiceRequest, opts ...grpc.CallOption) (*DescribeServiceResponse, error)
}

type serviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceServiceClient(cc grpc.ClientConnInterface) ServiceServiceClient {
	return &serviceServiceClient{cc}
}

func (c *serviceServiceClient) DeployService(ctx context.Context, in *DeployServiceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DeployServiceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServiceService_ServiceDesc.Streams[0], ServiceService_DeployService_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DeployServiceRequest, DeployServiceResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServiceService_DeployServiceClient = grpc.ServerStreamingClient[DeployServiceResponse]

func (c *serviceServiceClient) ReleaseService(ctx context.Context, in *ReleaseServiceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReleaseServiceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServiceService_ServiceDesc.Streams[1], ServiceService_ReleaseService_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReleaseServiceRequest, ReleaseServiceResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServiceService_ReleaseServiceClient = grpc.ServerStreamingClient[ReleaseServiceResponse]

func (c *serviceServiceClient) DeployReleasedService(ctx context.Context, in *DeployReleasedServiceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DeployReleasedServiceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServiceService_ServiceDesc.Streams[2], ServiceService_DeployReleasedService_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DeployReleasedServiceRequest, DeployReleasedServiceResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServiceService_DeployReleasedServiceClient = grpc.ServerStreamingClient[DeployReleasedServiceResponse]

func (c *serviceServiceClient) DeployServiceSet(ctx context.Context, in *DeployServiceSetRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DeployServiceSetResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServiceService_ServiceDesc.Streams[3], ServiceService_DeployServiceSet_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DeployServiceSetRequest, DeployServiceSetResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServiceService_DeployServiceSetClient = grpc.ServerStreamingClient[DeployServiceSetResponse]

func (c *serviceServiceClient) OperateService(ctx context.Context, in *OperateServiceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[OperateServiceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServiceService_ServiceDesc.Streams[4], ServiceService_OperateService_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[OperateServiceRequest, OperateServiceResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServiceService_OperateServiceClient = grpc.ServerStreamingClient[OperateServiceResponse]

func (c *serviceServiceClient) UndeployService(ctx context.Context, in *UndeployServiceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UndeployServiceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServiceService_ServiceDesc.Streams[5], ServiceService_UndeployService_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UndeployServiceRequest, UndeployServiceResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServiceService_UndeployServiceClient = grpc.ServerStreamingClient[UndeployServiceResponse]

func (c *serviceServiceClient) ListService(ctx context.Context, in *ListServiceRequest, opts ...grpc.CallOption) (*ListServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListServiceResponse)
	err := c.cc.Invoke(ctx, ServiceService_ListService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceServiceClient) DescribeService(ctx context.Context, in *DescribeServiceRequest, opts ...grpc.CallOption) (*DescribeServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeServiceResponse)
	err := c.cc.Invoke(ctx, ServiceService_DescribeService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServiceServer is the server API for ServiceService service.
// All implementations must embed UnimplementedServiceServiceServer
// for forward compatibility.
type ServiceServiceServer interface {
	DeployService(*DeployServiceRequest, grpc.ServerStreamingServer[DeployServiceResponse]) error
	ReleaseService(*ReleaseServiceRequest, grpc.ServerStreamingServer[ReleaseServiceResponse]) error
	DeployReleasedService(*DeployReleasedServiceRequest, grpc.ServerStreamingServer[DeployReleasedServiceResponse]) error
	DeployServiceSet(*DeployServiceSetRequest, grpc.ServerStreamingServer[DeployServiceSetResponse]) error
	OperateService(*OperateServiceRequest, grpc.ServerStreamingServer[OperateServiceResponse]) error
	UndeployService(*UndeployServiceRequest, grpc.ServerStreamingServer[UndeployServiceResponse]) error
	ListService(context.Context, *ListServiceRequest) (*ListServiceResponse, error)
	DescribeService(context.Context, *DescribeServiceRequest) (*DescribeServiceResponse, error)
	mustEmbedUnimplementedServiceServiceServer()
}

// UnimplementedServiceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceServiceServer struct{}

func (UnimplementedServiceServiceServer) DeployService(*DeployServiceRequest, grpc.ServerStreamingServer[DeployServiceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DeployService not implemented")
}
func (UnimplementedServiceServiceServer) ReleaseService(*ReleaseServiceRequest, grpc.ServerStreamingServer[ReleaseServiceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReleaseService not implemented")
}
func (UnimplementedServiceServiceServer) DeployReleasedService(*DeployReleasedServiceRequest, grpc.ServerStreamingServer[DeployReleasedServiceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DeployReleasedService not implemented")
}
func (UnimplementedServiceServiceServer) DeployServiceSet(*DeployServiceSetRequest, grpc.ServerStreamingServer[DeployServiceSetResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DeployServiceSet not implemented")
}
func (UnimplementedServiceServiceServer) OperateService(*OperateServiceRequest, grpc.ServerStreamingServer[OperateServiceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method OperateService not implemented")
}
func (UnimplementedServiceServiceServer) UndeployService(*UndeployServiceRequest, grpc.ServerStreamingServer[UndeployServiceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UndeployService not implemented")
}
func (UnimplementedServiceServiceServer) ListService(context.Context, *ListServiceRequest) (*ListServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListService not implemented")
}
func (UnimplementedServiceServiceServer) DescribeService(context.Context, *DescribeServiceRequest) (*DescribeServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeService not implemented")
}
func (UnimplementedServiceServiceServer) mustEmbedUnimplementedServiceServiceServer() {}
func (UnimplementedServiceServiceServer) testEmbeddedByValue()                        {}

// UnsafeServiceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServiceServer will
// result in compilation errors.
type UnsafeServiceServiceServer interface {
	mustEmbedUnimplementedServiceServiceServer()
}

func RegisterServiceServiceServer(s grpc.ServiceRegistrar, srv ServiceServiceServer) {
	// If the following call pancis, it indicates UnimplementedServiceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceService_ServiceDesc, srv)
}

func _ServiceService_DeployService_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeployServiceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServiceServer).DeployService(m, &grpc.GenericServerStream[DeployServiceRequest, DeployServiceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServiceService_DeployServiceServer = grpc.ServerStreamingServer[DeployServiceResponse]

func _ServiceService_ReleaseService_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReleaseServiceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServiceServer).ReleaseService(m, &grpc.GenericServerStream[ReleaseServiceRequest, ReleaseServiceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServiceService_ReleaseServiceServer = grpc.ServerStreamingServer[ReleaseServiceResponse]

func _ServiceService_DeployReleasedService_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeployReleasedServiceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServiceServer).DeployReleasedService(m, &grpc.GenericServerStream[DeployReleasedServiceRequest, DeployReleasedServiceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServiceService_DeployReleasedServiceServer = grpc.ServerStreamingServer[DeployReleasedServiceResponse]

func _ServiceService_DeployServiceSet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeployServiceSetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServiceServer).DeployServiceSet(m, &grpc.GenericServerStream[DeployServiceSetRequest, DeployServiceSetResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServiceService_DeployServiceSetServer = grpc.ServerStreamingServer[DeployServiceSetResponse]

func _ServiceService_OperateService_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OperateServiceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServiceServer).OperateService(m, &grpc.GenericServerStream[OperateServiceRequest, OperateServiceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServiceService_OperateServiceServer = grpc.ServerStreamingServer[OperateServiceResponse]

func _ServiceService_UndeployService_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UndeployServiceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServiceServer).UndeployService(m, &grpc.GenericServerStream[UndeployServiceRequest, UndeployServiceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServiceService_UndeployServiceServer = grpc.ServerStreamingServer[UndeployServiceResponse]

func _ServiceService_ListService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServiceServer).ListService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceService_ListService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServiceServer).ListService(ctx, req.(*ListServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceService_DescribeService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServiceServer).DescribeService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceService_DescribeService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServiceServer).DescribeService(ctx, req.(*DescribeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceService_ServiceDesc is the grpc.ServiceDesc for ServiceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dream11.od.service.v1.ServiceService",
	HandlerType: (*ServiceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListService",
			Handler:    _ServiceService_ListService_Handler,
		},
		{
			MethodName: "DescribeService",
			Handler:    _ServiceService_DescribeService_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DeployService",
			Handler:       _ServiceService_DeployService_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReleaseService",
			Handler:       _ServiceService_ReleaseService_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeployReleasedService",
			Handler:       _ServiceService_DeployReleasedService_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeployServiceSet",
			Handler:       _ServiceService_DeployServiceSet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OperateService",
			Handler:       _ServiceService_OperateService_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UndeployService",
			Handler:       _ServiceService_UndeployService_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dream11/od/service/v1/service.proto",
}
