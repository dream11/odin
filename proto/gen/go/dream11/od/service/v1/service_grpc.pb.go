// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: dream11/od/service/v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServiceService_UndeployService_FullMethodName = "/dream11.od.service.v1.ServiceService/UndeployService"
)

// ServiceServiceClient is the client API for ServiceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceServiceClient interface {
	UndeployService(ctx context.Context, in *UndeployServiceRequest, opts ...grpc.CallOption) (ServiceService_UndeployServiceClient, error)
}

type serviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceServiceClient(cc grpc.ClientConnInterface) ServiceServiceClient {
	return &serviceServiceClient{cc}
}

func (c *serviceServiceClient) UndeployService(ctx context.Context, in *UndeployServiceRequest, opts ...grpc.CallOption) (ServiceService_UndeployServiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceService_ServiceDesc.Streams[0], ServiceService_UndeployService_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceServiceUndeployServiceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceService_UndeployServiceClient interface {
	Recv() (*UndeployServiceResponse, error)
	grpc.ClientStream
}

type serviceServiceUndeployServiceClient struct {
	grpc.ClientStream
}

func (x *serviceServiceUndeployServiceClient) Recv() (*UndeployServiceResponse, error) {
	m := new(UndeployServiceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceServiceServer is the server API for ServiceService service.
// All implementations must embed UnimplementedServiceServiceServer
// for forward compatibility
type ServiceServiceServer interface {
	UndeployService(*UndeployServiceRequest, ServiceService_UndeployServiceServer) error
	mustEmbedUnimplementedServiceServiceServer()
}

// UnimplementedServiceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServiceServer struct {
}

func (UnimplementedServiceServiceServer) UndeployService(*UndeployServiceRequest, ServiceService_UndeployServiceServer) error {
	return status.Errorf(codes.Unimplemented, "method UndeployService not implemented")
}
func (UnimplementedServiceServiceServer) mustEmbedUnimplementedServiceServiceServer() {}

// UnsafeServiceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServiceServer will
// result in compilation errors.
type UnsafeServiceServiceServer interface {
	mustEmbedUnimplementedServiceServiceServer()
}

func RegisterServiceServiceServer(s grpc.ServiceRegistrar, srv ServiceServiceServer) {
	s.RegisterService(&ServiceService_ServiceDesc, srv)
}

func _ServiceService_UndeployService_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UndeployServiceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServiceServer).UndeployService(m, &serviceServiceUndeployServiceServer{stream})
}

type ServiceService_UndeployServiceServer interface {
	Send(*UndeployServiceResponse) error
	grpc.ServerStream
}

type serviceServiceUndeployServiceServer struct {
	grpc.ServerStream
}

func (x *serviceServiceUndeployServiceServer) Send(m *UndeployServiceResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ServiceService_ServiceDesc is the grpc.ServiceDesc for ServiceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dream11.od.service.v1.ServiceService",
	HandlerType: (*ServiceServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UndeployService",
			Handler:       _ServiceService_UndeployService_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dream11/od/service/v1/service.proto",
}
