// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.1
// source: dream11/od/component/v1/component.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ComponentService_ListComponentType_FullMethodName = "/dream11.od.component.v1.ComponentService/ListComponentType"
)

// ComponentServiceClient is the client API for ComponentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComponentServiceClient interface {
	ListComponentType(ctx context.Context, in *ListComponentTypeRequest, opts ...grpc.CallOption) (*ListComponentTypeResponse, error)
}

type componentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComponentServiceClient(cc grpc.ClientConnInterface) ComponentServiceClient {
	return &componentServiceClient{cc}
}

func (c *componentServiceClient) ListComponentType(ctx context.Context, in *ListComponentTypeRequest, opts ...grpc.CallOption) (*ListComponentTypeResponse, error) {
	out := new(ListComponentTypeResponse)
	err := c.cc.Invoke(ctx, ComponentService_ListComponentType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComponentServiceServer is the server API for ComponentService service.
// All implementations must embed UnimplementedComponentServiceServer
// for forward compatibility
type ComponentServiceServer interface {
	ListComponentType(context.Context, *ListComponentTypeRequest) (*ListComponentTypeResponse, error)
	mustEmbedUnimplementedComponentServiceServer()
}

// UnimplementedComponentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedComponentServiceServer struct {
}

func (UnimplementedComponentServiceServer) ListComponentType(context.Context, *ListComponentTypeRequest) (*ListComponentTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComponentType not implemented")
}
func (UnimplementedComponentServiceServer) mustEmbedUnimplementedComponentServiceServer() {}

// UnsafeComponentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComponentServiceServer will
// result in compilation errors.
type UnsafeComponentServiceServer interface {
	mustEmbedUnimplementedComponentServiceServer()
}

func RegisterComponentServiceServer(s grpc.ServiceRegistrar, srv ComponentServiceServer) {
	s.RegisterService(&ComponentService_ServiceDesc, srv)
}

func _ComponentService_ListComponentType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListComponentTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentServiceServer).ListComponentType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComponentService_ListComponentType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentServiceServer).ListComponentType(ctx, req.(*ListComponentTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComponentService_ServiceDesc is the grpc.ServiceDesc for ComponentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComponentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dream11.od.component.v1.ComponentService",
	HandlerType: (*ComponentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListComponentType",
			Handler:    _ComponentService_ListComponentType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dream11/od/component/v1/component.proto",
}
