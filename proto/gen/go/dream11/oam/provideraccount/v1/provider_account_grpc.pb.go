// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: dream11/oam/provideraccount/v1/provider_account.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProviderAccountService_GetProviderAccount_FullMethodName  = "/dream11.oam.provideraccount.v1.ProviderAccountService/GetProviderAccount"
	ProviderAccountService_GetProviderAccounts_FullMethodName = "/dream11.oam.provideraccount.v1.ProviderAccountService/GetProviderAccounts"
)

// ProviderAccountServiceClient is the client API for ProviderAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProviderAccountServiceClient interface {
	GetProviderAccount(ctx context.Context, in *GetProviderAccountRequest, opts ...grpc.CallOption) (*GetProviderAccountResponse, error)
	GetProviderAccounts(ctx context.Context, in *GetProviderAccountsRequest, opts ...grpc.CallOption) (*GetProviderAccountsResponse, error)
}

type providerAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProviderAccountServiceClient(cc grpc.ClientConnInterface) ProviderAccountServiceClient {
	return &providerAccountServiceClient{cc}
}

func (c *providerAccountServiceClient) GetProviderAccount(ctx context.Context, in *GetProviderAccountRequest, opts ...grpc.CallOption) (*GetProviderAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProviderAccountResponse)
	err := c.cc.Invoke(ctx, ProviderAccountService_GetProviderAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAccountServiceClient) GetProviderAccounts(ctx context.Context, in *GetProviderAccountsRequest, opts ...grpc.CallOption) (*GetProviderAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProviderAccountsResponse)
	err := c.cc.Invoke(ctx, ProviderAccountService_GetProviderAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProviderAccountServiceServer is the server API for ProviderAccountService service.
// All implementations must embed UnimplementedProviderAccountServiceServer
// for forward compatibility.
type ProviderAccountServiceServer interface {
	GetProviderAccount(context.Context, *GetProviderAccountRequest) (*GetProviderAccountResponse, error)
	GetProviderAccounts(context.Context, *GetProviderAccountsRequest) (*GetProviderAccountsResponse, error)
	mustEmbedUnimplementedProviderAccountServiceServer()
}

// UnimplementedProviderAccountServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProviderAccountServiceServer struct{}

func (UnimplementedProviderAccountServiceServer) GetProviderAccount(context.Context, *GetProviderAccountRequest) (*GetProviderAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderAccount not implemented")
}
func (UnimplementedProviderAccountServiceServer) GetProviderAccounts(context.Context, *GetProviderAccountsRequest) (*GetProviderAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderAccounts not implemented")
}
func (UnimplementedProviderAccountServiceServer) mustEmbedUnimplementedProviderAccountServiceServer() {
}
func (UnimplementedProviderAccountServiceServer) testEmbeddedByValue() {}

// UnsafeProviderAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProviderAccountServiceServer will
// result in compilation errors.
type UnsafeProviderAccountServiceServer interface {
	mustEmbedUnimplementedProviderAccountServiceServer()
}

func RegisterProviderAccountServiceServer(s grpc.ServiceRegistrar, srv ProviderAccountServiceServer) {
	// If the following call pancis, it indicates UnimplementedProviderAccountServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProviderAccountService_ServiceDesc, srv)
}

func _ProviderAccountService_GetProviderAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAccountServiceServer).GetProviderAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderAccountService_GetProviderAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAccountServiceServer).GetProviderAccount(ctx, req.(*GetProviderAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAccountService_GetProviderAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAccountServiceServer).GetProviderAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderAccountService_GetProviderAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAccountServiceServer).GetProviderAccounts(ctx, req.(*GetProviderAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProviderAccountService_ServiceDesc is the grpc.ServiceDesc for ProviderAccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProviderAccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dream11.oam.provideraccount.v1.ProviderAccountService",
	HandlerType: (*ProviderAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProviderAccount",
			Handler:    _ProviderAccountService_GetProviderAccount_Handler,
		},
		{
			MethodName: "GetProviderAccounts",
			Handler:    _ProviderAccountService_GetProviderAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dream11/oam/provideraccount/v1/provider_account.proto",
}
